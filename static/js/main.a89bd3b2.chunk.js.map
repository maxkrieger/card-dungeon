{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["AvatarCardComponent","card","videoElement","useRef","useEffect","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","play","ref","style","width","height","YoutubeCardComponent","url","uri","App","useState","kind","title","icon","layout","i","x","y","w","h","cards","setCards","onLayoutChange","useCallback","newLayout","newCards","map","find","addYoutube","vid","window","prompt","Math","random","toString","className","backgroundColor","color","display","justifyContent","alignItems","padding","borderBottom","fontFamily","onClick","cols","rowHeight","innerWidth","autoSize","compactType","isResizable","resizeHandles","key","data-grid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iSAsBMA,EAAsD,SAAC,GAAa,EAAXC,KAAY,IACnEC,EAAeC,iBAAyB,MAc9C,OAbAC,qBAAU,WACHF,GAGLG,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAAQC,MAAK,SAACC,GACzD,IAAIF,EAAQN,EAAaS,QACpBH,IAGLA,EAAMI,UAAYF,EAClBF,EAAMK,aAEP,CAACX,IACG,2BAAOY,IAAKZ,EAAca,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAG7DC,EAAwD,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KAC/D,OAAO,kBAAC,IAAD,CAAakB,IAAKlB,EAAKmB,IAAKJ,MAAO,OAAQC,OAAQ,UAgG7CI,MA7Ff,WAAe,MAEaC,mBAAiB,CACzC,CACEC,KAAM,SACNC,MAAO,KACPC,KAAM,SACNC,OAAQ,CACNC,EAAG,IACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,MAZI,mBAENC,EAFM,KAECC,EAFD,KAgBPC,EAAiBC,uBACrB,SAACC,GACC,IAAMC,EAAWL,EAAMM,KAAI,SAACrC,GAAD,mBAAC,eACvBA,GADsB,IAEzByB,OAAQU,EAAUG,MAAK,qBAAGZ,IAAc1B,EAAKyB,OAAOC,MAAM1B,EAAKyB,YAEjEO,EAASI,KAEX,CAACL,IAGGQ,EAAaL,uBAAY,WAC7B,IAAMM,EAAMC,OAAOC,OAAO,QACtBF,GACFR,EAAS,GAAD,mBACHD,GADG,CAEN,CACET,KAAM,UACNC,MAAO,QACPC,KAAM,UACNL,IAAKqB,EACLf,OAAQ,CAAEE,EAAG,EAAGC,EAAG,EAAGF,EAAGiB,KAAKC,SAASC,WAAYhB,EAAG,EAAGC,EAAG,SAIjE,CAACC,IACJ,OACE,yBAAKe,UAAU,OACb,4BACEhC,MAAO,CACLiC,gBAAiB,UACjBC,MAAO,UACPhC,OAAQ,OACRiC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,kBACTC,aAAc,kBACdC,WAAW,qBAGb,6BACE,4BAAQC,QAAShB,GAAjB,WAEF,6CAEF,kBAAC,IAAD,CACEN,eAAgBA,EAChBuB,KAAM,GACNC,UAAW,IAEX1C,MAAO0B,OAAOiB,WACdC,UAAU,EACVC,YAAa,KAEbC,aAAa,EACbC,cAAe,CAAC,OAEf/B,EAAMM,KAAI,SAACrC,EAAY+D,GAAb,OACT,yBACEA,IAAK/D,EAAKyB,OAAOC,EACjBsC,YAAWhE,EAAKyB,OAChBX,MAAO,CAAEiC,gBAAiB,aAAcK,QAAS,SAEjD,6BAAMpD,EAAKuB,OACI,WAAdvB,EAAKsB,KACJ,kBAAC,EAAD,CAAqBtB,KAAMA,IAE3B,kBAAC,EAAD,CAAsBA,KAAMA,WCpHtBiE,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBrE,WACrBA,UAAUsE,cAAcC,MACrBnE,MAAK,SAAAoE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a89bd3b2.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport GridLayout, { Layout } from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport ReactPlayer from \"react-player\";\n\nexport interface AbstractCard {\n  layout: GridLayout.Layout;\n  title: string;\n  icon: string;\n}\n\nexport interface YoutubeCard extends AbstractCard {\n  kind: \"youtube\";\n  uri: string;\n}\n\nexport interface AvatarCard extends AbstractCard {\n  kind: \"avatar\";\n}\n\nexport type Card = YoutubeCard | AvatarCard;\n\nconst AvatarCardComponent: React.FC<{ card: AvatarCard }> = ({ card }) => {\n  const videoElement = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (!videoElement) {\n      return;\n    }\n    navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => {\n      let video = videoElement.current;\n      if (!video) {\n        return;\n      }\n      video.srcObject = stream;\n      video.play();\n    });\n  }, [videoElement]);\n  return <video ref={videoElement} style={{ width: \"100%\", height: \"100%\" }} />;\n};\n\nconst YoutubeCardComponent: React.FC<{ card: YoutubeCard }> = ({ card }) => {\n  return <ReactPlayer url={card.uri} width={\"100%\"} height={\"100%\"} />;\n};\n\nfunction App() {\n  // https://www.kirupa.com/html5/accessing_your_webcam_in_html5.htm\n  const [cards, setCards] = useState<Card[]>([\n    {\n      kind: \"avatar\",\n      title: \"me\",\n      icon: \"camera\",\n      layout: {\n        i: \"1\",\n        x: 0,\n        y: 0,\n        w: 2,\n        h: 1,\n      },\n    },\n  ]);\n  const onLayoutChange = useCallback(\n    (newLayout: Layout[]) => {\n      const newCards = cards.map((card) => ({\n        ...card,\n        layout: newLayout.find(({ i }) => i === card.layout.i) || card.layout,\n      }));\n      setCards(newCards);\n    },\n    [cards]\n  );\n  // TODO: spaces/backpack\n  const addYoutube = useCallback(() => {\n    const vid = window.prompt(\"url?\");\n    if (vid) {\n      setCards([\n        ...cards,\n        {\n          kind: \"youtube\",\n          title: \"video\",\n          icon: \"youtube\",\n          uri: vid,\n          layout: { x: 0, y: 0, i: Math.random().toString(), w: 2, h: 1 },\n        },\n      ]);\n    }\n  }, [cards]);\n  return (\n    <div className=\"App\">\n      <header\n        style={{\n          backgroundColor: \"#C39B77\",\n          color: \"#3A1915\",\n          height: \"20px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          padding: \"5px 0px 0px 5px\",\n          borderBottom: \"1px solid black\",\n          fontFamily: `\"Alagard\", serif`,\n        }}\n      >\n        <nav>\n          <button onClick={addYoutube}>spells</button>\n        </nav>\n        <nav>DungeonCard</nav>\n      </header>\n      <GridLayout\n        onLayoutChange={onLayoutChange}\n        cols={12}\n        rowHeight={100}\n        // items={40}\n        width={window.innerWidth}\n        autoSize={true}\n        compactType={null}\n        // isBounded={true}\n        isResizable={true}\n        resizeHandles={[\"se\"]}\n      >\n        {cards.map((card: Card, key: number) => (\n          <div\n            key={card.layout.i}\n            data-grid={card.layout}\n            style={{ backgroundColor: \"sandybrown\", padding: \"10px\" }}\n          >\n            <div>{card.title}</div>\n            {card.kind === \"avatar\" ? (\n              <AvatarCardComponent card={card} />\n            ) : (\n              <YoutubeCardComponent card={card} />\n            )}\n          </div>\n        ))}\n      </GridLayout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}